module.exports.config = {
    name: "kiss3",
    version: "7.3.1",
    hasPermssion: 0,
    credits: "‚ÄîÕüÕüÕûÕûùêÇùêòùêÅùêÑùêë ‚ò¢Ô∏è_ñ£ò -ùêÅùêéùêì ‚ö†Ô∏è ùëªùë¨ùë®ùë¥_ ‚ò¢Ô∏è",
    description: "kiss",
    commandCategory: "img",
    usages: "[@mention]",
    cooldowns: 5,
    dependencies: {
        "axios": "",
        "fs-extra": "",
        "path": "",
        "jimp": ""
    }
};

module.exports.onLoad = async () => {
    const { resolve } = global.nodemodule["path"];
    const { existsSync, mkdirSync } = global.nodemodule["fs-extra"];
    const { downloadFile } = global.utils;
    const dirMaterial = __dirname + `/cache/canvas/`;
    const path = resolve(__dirname, 'cache/canvas', 'kissv3.png');
    if (!existsSync(dirMaterial)) mkdirSync(dirMaterial, { recursive: true });
    if (!existsSync(path)) await downloadFile("https://i.imgur.com/3laJwc1.jpg", path);
}

async function makeImage({ one, two }) {
    const fs = global.nodemodule["fs-extra"];
    const path = global.nodemodule["path"];
    const axios = global.nodemodule["axios"];
    const jimp = global.nodemodule["jimp"];
    const __root = path.resolve(__dirname, "cache", "canvas");

    let kiss_img = await jimp.read(__root + "/kissv3.png");
    let pathImg = __root + `/kissv3_${one}_${two}.png`;
    let avatarOne = __root + `/avt_${one}.png`;
    let avatarTwo = __root + `/avt_${two}.png`;

    let getAvatarOne = (await axios.get(`https://graph.facebook.com/${one}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`, { responseType: 'arraybuffer' })).data;
    fs.writeFileSync(avatarOne, Buffer.from(getAvatarOne, 'utf-8'));

    let getAvatarTwo = (await axios.get(`https://graph.facebook.com/${two}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`, { responseType: 'arraybuffer' })).data;
    fs.writeFileSync(avatarTwo, Buffer.from(getAvatarTwo, 'utf-8'));

    let circleOne = await jimp.read(await circle(avatarOne));
    let circleTwo = await jimp.read(await circle(avatarTwo));
    kiss_img.composite(circleOne.resize(350, 350), 200, 300).composite(circleTwo.resize(350, 350), 600, 80);

    let raw = await kiss_img.getBufferAsync("image/png");

    fs.writeFileSync(pathImg, raw);
    fs.unlinkSync(avatarOne);
    fs.unlinkSync(avatarTwo);

    return pathImg;
}

async function circle(image) {
    const jimp = require("jimp");
    image = await jimp.read(image);
    image.circle();
    return await image.getBufferAsync("image/png");
}

module.exports.run = async function ({ event, api, args }) {
    const fs = global.nodemodule["fs-extra"];
    const { threadID, messageID, senderID } = event;
    const mention = Object.keys(event.mentions || {});
    const captions = [
        "‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶Ö‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶ï‡¶∞‡ßá, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶Ø‡¶º‡¶æ‡¶§‡ßá ‡¶ú‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡¶°‡¶º‡¶õ‡¶ø ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶∞‡ßá‡¶¨‡¶æ‡¶∞!üå∑",
        "‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ï‡ßá‡¶® ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶ø ‡¶§‡¶æ‡¶∞ ‡¶ï‡ßã‡¶® ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®‡¶æ ‡¶®‡¶æ‡¶á! ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶∏‡¶æ‡¶∞‡¶æ‡¶ú‡ßÄ‡¶¨‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞‡¶ü‡¶æ ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ü‡¶õ‡ßá!üíö",
        "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶æ‡¶ü‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Æ‡¶®‡ßá ‡¶π‡¶Ø‡¶º, ‡¶è‡¶á ‡¶è‡¶ï ‡¶ú‡¶®‡¶Æ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ï‡¶Æ ‡¶∏‡¶Æ‡¶Ø‡¶º!üòò",
        "‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶∏‡ßá‡¶á ‡¶ó‡¶≤‡ßç‡¶™ ‡¶π‡¶¨‡ßá? ‡¶Ø‡ßá‡¶á ‡¶ó‡¶≤‡ßç‡¶™‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡ßã‡¶®‡ßã ‡¶∂‡ßá‡¶∑ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶®‡¶æ!‚ô•Ô∏è",
        "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡¶æ‡¶∂‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶Æ‡¶®‡ßá ‡¶π‡ßü, ‡¶ú‡ßÄ‡¶¨‡¶® ‡¶Ø‡ßá‡¶® ‡¶è‡¶ï‡¶ü‡¶æ ‡¶Æ‡¶ß‡ßÅ‡¶∞ ‡¶ï‡¶¨‡¶ø‡¶§‡¶æ‡ßü ‡¶∞‡ßÇ‡¶™ ‡¶®‡ßá‡ßü!üòç",
        "‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶õ‡¶æ‡ßú‡¶æ ‡¶ú‡ßÄ‡¶¨‡¶®‡¶ü‡¶æ ‡¶Ö‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶§‡¶æ!üß°",
        "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡ßç‡¶¨‡¶™‡ßç‡¶®, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§!üåª",
        "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ö‡ßã‡¶ñ‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶∏‡ßç‡¶•‡¶ø‡¶§‡ßç‡¶¨ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶§‡ßá ‡¶è‡¶∏‡ßã‡¶®‡¶æ, ‡¶π‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá! ‡¶ï‡ßá‡¶®‡¶®‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶∞‡ßã‡¶ü‡¶æ-‡¶ú‡ßÅ‡¶∞‡ßá‡¶á ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞‡¶á ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ï ‡¶Ü‡¶®‡¶æ‡¶ó‡ßã‡¶®‡¶æ!üå∫",
        "‡¶§‡ßã‡¶Æ‡¶æ‡¶§‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶§‡ßã‡¶Æ‡¶æ‡¶§‡ßá‡¶á ‡¶∂‡ßá‡¶∑, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á ‡¶∂‡ßá‡¶∑!üòò",
        "‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø ‡¶π‡¶Ø‡¶º, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø ‡¶™‡ßÉ‡¶•‡¶ø‡¶¨‡ßÄ‡¶∞ ‡¶∏‡ßá‡¶∞‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø‡•§üåª·É¶üå∫"
    ];

    if (!mention[0]) return api.sendMessage("Please mention 1 person.", threadID, messageID);

    const one = senderID, two = mention[0];
    const caption = captions[Math.floor(Math.random() * captions.length)];

    try {
        const path = await makeImage({ one, two });
        return api.sendMessage({
            body: caption,
            attachment: fs.createReadStream(path)
        }, threadID, () => fs.unlinkSync(path), messageID);
    } catch (err) {
        return api.sendMessage("‡¶õ‡¶¨‡¶ø ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, messageID);
    }
};